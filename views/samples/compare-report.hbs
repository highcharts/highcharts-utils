
<script>
/* eslint-disable */
Highcharts.SparkLine = function (renderTo, data) {
    return Highcharts.chart(renderTo, {
        chart: {
            renderTo: renderTo,
            backgroundColor: null,
            borderWidth: 0,
            type: 'area',
            margin: [2, 0, 2, 0],
            width: 120,
            height: 20,
            style: {
                overflow: 'visible'
            },
            skipClone: true
        },
        title: {
            text: ''
        },
        credits: {
            enabled: false
        },
        xAxis: {
            labels: {
                enabled: false
            },
            title: {
                text: null
            },
            startOnTick: false,
            endOnTick: false,
            tickPositions: []
        },
        yAxis: {
            endOnTick: false,
            startOnTick: false,
            labels: {
                enabled: false
            },
            title: {
                text: null
            },
            tickPositions: [0]
        },
        legend: {
            enabled: false
        },
        tooltip: {
            outside: true
        },
        plotOptions: {
            series: {
                animation: false,
                color: Highcharts.getOptions().colors[1],
                shadow: false,
                states: {
                    hover: {
                        lineWidth: 1
                    }
                },
                marker: {
                    radius: 1,
                    states: {
                        hover: {
                            radius: 2
                        }
                    }
                },
                fillOpacity: 0.25
            },
            column: {
                negativeColor: '#910000',
                borderColor: 'silver'
            },
            // We cannot use it in plotOptions.series because treemap
            // has the same layout option: layoutAlgorithm.
            networkgraph: {
                layoutAlgorithm: {
                    enableSimulation: false,
                    maxIterations: 10
                }
            },
            packedbubble: {
                layoutAlgorithm: {
                    enableSimulation: false,
                    maxIterations: 10
                }
            }
        },
        series: [{
            data: data
        }]
    });
};
</script>
<script>
	var controller = window.parent && window.parent.controller;
	/* eslint-disable */
	function updateDiff() {
		var checked = [],
			browsers = $('#results').data('browsers').split(',');

		$('#results').find('tr').each(function () {
			var tr = this,
				range = [],
				diff,
				className,
				$valueCells = $(this).find('td.value'),
				nightlyDiff;

			if ($valueCells[0]) {
				var s = $valueCells[0].innerHTML;
				if (/^[0-9]+$/.test(s)) {
					nightlyDiff = parseInt(s, 10);
				}

				$valueCells[0].style.cursor = 'pointer';
				$valueCells[0].title = 'View comparison for nightly';
				$valueCells[0].onclick = function () {
					window.open(
						'/samples/nightly/single?path=' +
						tr.querySelector('th.path a').textContent
					);
				};
			}

			$valueCells.each(function (i, td) {
				if (td.innerHTML !== '') {
					var diff = +td.innerHTML;

					if (!isNaN(diff)) {
						range.push(diff);
					}

					// Highlight cell if the diff is very different from nightly
					if (typeof nightlyDiff === 'number') {
						var change = diff - nightlyDiff;
						var relativeChange = Math.abs(change / nightlyDiff);
						if (relativeChange > controller.tolerance) {
							td.className = 'different';
						}
					}
				}
			});


			if (range.length < 2) {
				diff = '-';
			} else {
				diff = Math.abs(Math.max.apply(0, range) - Math.min.apply(0, range));

				if (diff === 0) {
					className = 'diff';
                } else {
					className = 'diff different';

					// The difference in changed pixels, as a percentage of the max
					// different browser. So if browsers have [300, 300, 400]
					// changed pixels, the difference in changed pixels is 100,
					// which is 25% of the max different browser.
					diff = Math.round(diff / Math.max.apply(0, range) * 100) + '%';
				}
			}
			$(this).find('td.diff')
				.attr({
					'class': className
				})
				.html(diff);
		});
	}
	$(function () {
		var $compareDiv = $('#compare-browsers'),
			$inputs = $compareDiv.find('input');

		updateDiff();
		$inputs.each(function () {
			$(this).bind('change', function () {
				updateDiff();
			});
		})
	});
	var skip = null;
</script>

<style type="text/css">
	* {
		font-family: Arial, sans-serif;
	}
	body {
		font-size: 0.8em;
	}
	.top-bar {
		color: white;
		font-family: Arial, sans-serif;
		font-size: 0.8em;
		padding: 0.5em;
		height: 3.5em;
		background: #57544A;
		background: -webkit-linear-gradient(top, #57544A, #37342A);
		background: -moz-linear-gradient(top, #57544A, #37342A);
		box-shadow: 0px 0px 8px #888;
	}


	.top-bar a {
		color: white;
		text-decoration: none;
		font-weight: bold;
	}

	table {
		border-collapse: collapse;
	}
	th {
		text-align: left;
		background: #EEF;
	}
	td, th {
		border: 1px solid silver;
		padding: 3px;
	}
	.path {
		border-right: 2px solid black;
	}
	.diff {
		background: #EEF;
		border-left: 2px solid black;
		border-right: 2px solid black;
	}
	.different {
		background: #f15c80;
		color: white;
	}
    .val-skip {
        opacity: 0.3;
    }
</style>



<div class="top-bar">

	<h2 style="margin: 0">Comparison report</h2>
</div>

<div style="margin: 10px">

	<div>
		<h3>Test results</h3>
		<table id="results" data-browsers="{{browsers}}">

			{{#each compare}}

			{{#if showHeader}}
			<tr>
				<th class='path'></th>
				{{#each this.browsers}}
				<th>{{@key}}</th>
				{{/each}}
				<th class='sparkline' colspan="2">Variance</th>
				<!-- th class='diff'>Diff</th -->
				<th class='comment'>Comment</th>
			</tr>
			{{/if}}

			<tr>
				<th class='path'>
					{{@index}}.
					<a href="http://{{../ipAddress}}:3030/samples/#test/{{@key}}"
						target="_blank">{{@key}}</a>
				</th>
				{{#each this.browsers}}
				<td class="value val-{{this}}" title="{{@key}}: {{this}}">{{this}}</td>
				{{/each}}

				<td id="sparkline-{{@index}}" class="sparkline"></td>
				{{#if this.hasSparkline}}
				<script>
                    Highcharts.SparkLine(
                        'sparkline-{{@index}}',
                        [{{this.sparkline}}]
                    );
					</script>
				{{/if}}

				<td class="diff"></td>
				<td class="comment">
				{{#if this.comment}}
					<i class="fa fa-{{this.comment.symbol}}"></i> {{this.comment.title}}
				{{/if}}
				</td>

			</tr>
			{{/each}}
		</table>
	</div>
</div>
